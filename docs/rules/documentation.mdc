# Documentation Standards

Rule to ensure consistent documentation across the codebase.

<rule>
name: documentation_standards
description: Standards for code documentation and comments
filters:
  # Match any Rust files
  - type: file_extension
    pattern: "\\.rs$"
  # Match documentation comments
  - type: content
    pattern: "///|//!|#\\[doc"

actions:
  - type: suggest
    message: |
      When writing documentation:

      1. Module-Level Documentation:
         ```rust
         //! Module description that explains its purpose
         //! 
         //! Detailed explanation of what the module handles, its key
         //! components, and any important concepts.
         ```

      2. Struct Documentation:
         ```rust
         /// Represents a complex type with a clear purpose.
         /// Each field is documented to explain its role and format.
         #[derive(Debug)]  // Add debug when struct should be printable
         pub struct MyStruct {
             /// Field description explaining its purpose
             /// Format specification if applicable (e.g. "r,g,b" format)
             pub field: Type,
         }
         ```

      3. Function Documentation:
         ```rust
         /// Clear description of what the function does.
         /// 
         /// # Arguments
         /// * `arg_name` - Detailed description of the argument
         /// 
         /// # Returns
         /// * `ReturnType` - Description of the return value
         /// 
         /// # Panics
         /// Document any conditions that cause panics
         pub fn my_function(arg: Type) -> ReturnType {
         ```

      4. Enum Documentation:
         ```rust
         /// Description of what the enum represents
         /// Include any important usage information
         #[derive(Debug)]
         pub enum MyEnum {
             /// Description of this variant
             /// Include any specific behavior
             Variant1,
         }
         ```

      5. Error Handling Documentation:
         ```rust
         /// Function that can fail
         /// 
         /// # Errors
         /// * Describes conditions that cause errors
         /// * Lists the types of errors that can occur
         pub fn fallible_function() -> Result<T, Error> {
         ```

      6. Constants and Configuration:
         ```rust
         /// Description of what the constant represents
         /// Include units or format if applicable
         pub const MY_CONSTANT: f64 = 0.3;
         ```

      7. Public API Documentation:
         ```rust
         /// Public function with complete documentation
         /// 
         /// Detailed description of the function's purpose,
         /// behavior, and any important notes about usage.
         /// 
         /// # Examples
         /// ```rust
         /// let result = my_function("input");
         /// assert_eq!(result, "expected");
         /// ```
         pub fn my_function() {
         ```

      8. Internal Function Documentation:
         ```rust
         /// Brief description of internal function
         /// Focus on technical details relevant to maintainers
         fn internal_function() {
         ```

examples:
  - input: |
      //! Color handling module for CLI output
      //! 
      //! This module manages color schemes and formatting for
      //! CLI output, ensuring consistent appearance across the app.
      
      /// Represents a color scheme with RGB values for different roles.
      /// Each color is stored as a comma-separated RGB string.
      #[derive(Debug)]
      pub struct ColorScheme {
          /// RGB color for informational messages (format: "r,g,b")
          pub informational: String,
      }
      
      /// Formats text with specified color scheme
      /// 
      /// # Arguments
      /// * `text` - The text to color
      /// * `role` - The role determining color choice
      /// 
      /// # Returns
      /// * `String` - Colored text string
      pub fn format_text(text: &str, role: &str) -> String {
    output: "Valid documentation format"

  - input: |
      // Bad documentation
      struct Colors {
          // RGB color
          info: String,
      }
      
      // Colors the text
      fn color_text(t: &str) -> String {
    output: "Invalid documentation format"

metadata:
  priority: high
  version: 1.0
</rule>