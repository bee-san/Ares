From b060c92237d0d9fb33ac6192b28f5742a6a720c0 Mon Sep 17 00:00:00 2001
From: Ren Trieu <ren.trieu.github@gmail.com>
Date: Tue, 8 Apr 2025 16:39:44 -0700
Subject: [PATCH] Example for exiting the search on human checker success

---
 astar_human_checker_exit_example.patch | 31 ++++++++++++++++++++++++++
 src/searchers/astar.rs                 | 20 +++++++++++++++++
 2 files changed, 51 insertions(+)
 create mode 100644 astar_human_checker_exit_example.patch

diff --git a/astar_human_checker_exit_example.patch b/astar_human_checker_exit_example.patch
new file mode 100644
index 0000000..2af7587
--- /dev/null
+++ b/astar_human_checker_exit_example.patch
@@ -0,0 +1,31 @@
+diff --git a/src/searchers/astar.rs b/src/searchers/astar.rs
+index 02d4a1c..a3e1df2 100644
+--- a/src/searchers/astar.rs
++++ b/src/searchers/astar.rs
+@@ -376,6 +376,26 @@ fn expand_node(
+             let athena_checker = Checker::<Athena>::new();
+             let checker = CheckerTypes::CheckAthena(athena_checker);
+             let result = decoder.crack(&current_node.state.text[0], &checker);
++            if result.success {
++                let mut decoders_used = current_node.state.path.clone();
++                let text = result.unencrypted_text.clone().unwrap_or_default();
++                debug!("DEBUG: Found successful result with decoder: {} -> {:?}", result.decoder, text);
++                decoders_used.push(result.clone());
++
++                // Create a special "result" node with a very low total_cost to ensure it's processed first
++                let result_node = AStarNode {
++                    state: DecoderResult {
++                        text: text.clone(),
++                        path: decoders_used,
++                    },
++                    cost: current_node.cost + 1,
++                    heuristic: -1000.0, // Very negative to ensure highest priority
++                    total_cost: -1000.0, // Very negative to ensure highest priority
++                    next_decoder_name: Some("__RESULT__".to_string()), // Special marker
++                };
++
++                new_nodes.push(result_node);
++            }
+ 
+             // Process the result
+             if let Some(decoded_text) = &result.unencrypted_text {
diff --git a/src/searchers/astar.rs b/src/searchers/astar.rs
index 02d4a1c..a3e1df2 100644
--- a/src/searchers/astar.rs
+++ b/src/searchers/astar.rs
@@ -376,6 +376,26 @@ fn expand_node(
             let athena_checker = Checker::<Athena>::new();
             let checker = CheckerTypes::CheckAthena(athena_checker);
             let result = decoder.crack(&current_node.state.text[0], &checker);
+            if result.success {
+                let mut decoders_used = current_node.state.path.clone();
+                let text = result.unencrypted_text.clone().unwrap_or_default();
+                debug!("DEBUG: Found successful result with decoder: {} -> {:?}", result.decoder, text);
+                decoders_used.push(result.clone());
+
+                // Create a special "result" node with a very low total_cost to ensure it's processed first
+                let result_node = AStarNode {
+                    state: DecoderResult {
+                        text: text.clone(),
+                        path: decoders_used,
+                    },
+                    cost: current_node.cost + 1,
+                    heuristic: -1000.0, // Very negative to ensure highest priority
+                    total_cost: -1000.0, // Very negative to ensure highest priority
+                    next_decoder_name: Some("__RESULT__".to_string()), // Special marker
+                };
+
+                new_nodes.push(result_node);
+            }
 
             // Process the result
             if let Some(decoded_text) = &result.unencrypted_text {
-- 
2.47.2

